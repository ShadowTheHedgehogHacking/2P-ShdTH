		(*Transformation*)
	4/17/19
super loading model:
80086ec0: loads status bit(0xAC) 40000000


reads(0xAC):
800b5240
(deleted rest as lead to nothing)

8027f088 changes to 0x00000010
80079378 changes to 0xc0000000
8027f144 changes to 0x00080000

--this doesnt work, new approach---

----------------

80099f78 -> magic happens in here, nop the next check for always super
---not quite, isnt always called

800af8b8 -> the next step out, bctrl, appears to call multiple things
-without gecko code enabled the following are ctrl destinations:
	-801dbae4
	-80099898
	-80099a50
	-80099658
-with gecko code enabled
	-801dbae4
	-80099898
	-80099a50
	-80099658
	-80099f1c******** <- this one?
	
for the bctrl above, code goes like this:
	lwz r12, 0(r31);
	lwz r12, 0xC(r12);
	mtctr r12;
	bctrl;

(r12)801dbae4 originates from (r31)80992a00, which when dereferenced equates to string: "ClrVelocityCommand"
(r12)80099898 originates from (r31)809e5120, which when dereferenced equates to string: "Player::ResetCameraCommand"
(r12)80099a50 originates from (r31)809e5160, which when dereferenced equates to string: "Player::CancelActingCommand"
(r12)80099658 originates from (r31)809e51a0, which when dereferenced equates to string: "Player::ResetCommand"
(r12)80099f1c originates from (r31)809e51a0, which when dereferenced equates to string: "Player::ToSuperCommand"

80099f1c contains 80099f78 so.... partial success. now to find out why ToSuperCommand is called

	4/18/19
801a0480 a few steps out, might be main function caller?
sets position, angle, super etc on restart. confirmed working as nopping makes it not happen
looking for player pointer
		(/*Transformation*)

		(*De-Transformation*)
	4/20/19
unrelated maybe:
800af6b8 bctrl called when player hit, followed by a beq. nopping beq causes death every hit, even for super


8027e184 stw  r0, 0x74 (r3) -> nopping this prevents the super "effect" pointer from being set to null, and keeps the super model, even though shadow is no longer "super"

after doing a write bp on the pointer to super effect, 8004eed4 appears to set it to 0 as follows:
8004ef64 stw  r0, 0xC (r3)

stepping out to the previous function 8027e1e0, the top of which sets 0x18(r30) to 8054defc, which appears to be a proper pointer to Player::Shadow::Super
never seen this "object" before, might be related

turns out the pointer to the "super effect" only makes regular shadow invisible, thus not quite what im after

going back to 8027e184 to see why 0x74(r3) being set to 2 causes super model to dissapear, and shadow to reappear

	4/21/19
so actually after setting the pointer to "Super"(playerpointer->0x23c->0x44) to null it looks like it detaches super shadows model from shadow
so while this probably is related to creating/destroying the model, but it will likely be in a differnet function


		(/*De-Transformation*)
		
		(*Super State & Actions*)
			<Weapons>
	4/21/19
determined that the following bctrl in 8027e0d8 leads to the function that removes the chaos spear "weapon" upon reverting to normal:
8027e178 bctrl -> 8023aff0
can confirm, as nopping this bctrl allows shadow to keep chaos spear even after reverting to normal
does not appear however to be the function everything uses for weapons, as shadow still gains chaos spear even after adding a blr at the top
hmm... shadow appears to be able to "drop" it but never actually lets go
additionally, swapping with another weapon causes a halt
but good news is that super shadow is able to pickup other weapons, but was only able to acheive this by nopping the code that keeps super shadows model, so the game thinks shadow is normal otherwise
will look into what other checks I am not accounting for that may affect chaos spear, will probably revisit 8023aff0 as there are some "status" checks in there

	4/23/19
after putting a blr at the top of 8023aff0, shadow maintains chaos spear after reverting.
shadow attempts to drop weapon but cannot. able to switch for other weapons, vaccum gun doesnt appear to work(although on a second test and beyond it does?), but shadow rifle does
shadow is now not able to drop shadow rifle, and does not drop even after running out of ammo, can keep shooting
does not drop shadow rifle while dying, upon respawning shadow regains chaos spear
8023b03c bl	->0x8023AD08 appears to be the important call, nopping does the same as above
putting a breakpoint on 8023aff0, trips when a weapons is dropped (but not picked up), and when all ammo is consumed
put a breakpoint on 8023ad08 -> same as above
inspecting 8023ad08:
8023ad1c lwz r3, 0x0034 (r3)
8023ad20 cmplwi	r3, 0
8023ad24 beq- ->0x8023AEA0 <- if its equal and makes the branch, it jumps over the code that drops weapon
...

8023ad58 beq- ->0x8023AD84 <- appears to always branch when weapon dropped, appears to be some check to load alternate drop speed parameters (slightly father away)
8023ad7c bl	->0x800091D0 <- branched over by above^
8023ad80 b ->0x8023ADA8 <- branched over by above^
8023ada4 bl	->0x800091D0 <- when nopped weapon immediate hits ground when dropped
8023adb4 bl	->0x80079628 <- when nopped the weapon is dropped but does dissapears and does not land on ground (although not like when consuming all ammo)
8023adc0 bl	->0x800091D0 <- when nopped dropped weapon always falls the same direction
8023adcc bl	->0x80079698 <- no apparent change when nopped
8023add8 bl	->0x800091EC <- no apparent change when nopped
8023ade4 bl	->0x800091EC <- when nopped the weapon is dropped but does dissapears and does not land on ground (although not like when consuming all ammo)
8023adf4 bl	->0x8040CD74 <- no apparent change when nopped
8023ae00 bl	->0x800091EC <- no apparent change when nopped
8023ae0c bl	->0x80221D94 <- no apparent change when nopped
8023ae18 bl	->0x80093230 <- no apparent change when nopped
8023ae24 bl	->0x8040CFF8 <- no apparent change when nopped
8023ae34 bl	->0x8023ABF0 <- weapon ammo reset when dropped, even when ammo is exausted
8023ae50 bl	->0x80221B08 <- when nopped the weapon is dropped but does dissapears and does not land on ground (although not like when consuming all ammo)
8023ae58 bl	->0x8023ABF0 <- no apparent change when nopped
8023ae60 bne- ->0x8023AE8C <- no apparent change when nopped, no apparent change when changed to b
8023ae64 bl	->0x8040EE90 <- no apparent change when nopped
8023ae74 bne- ->0x8023AE8C <- no apparent change when nopped
8023ae78 bl	->0x80053164 <- no breakpoint hits during weapon drop
8023ae88 bl	->0x801D560C <- no change when nopped
8023ae9c bl	->0x8023A10C <- when nopped the weapon is dropped, but shadow also keeps a copy of weapon in his hand

tsking a look at 8023ae34 bl ->0x8023ABF0a:
the line above it is 8023ae30 lwz r31, 0x0014 (r4)
in this case r31 appears to be some sort of weapon ID. changing ad-hoc after a breakpoint makes a different weapon drop while maintaining ammo amount
...
after experimenting with this for a bit. I feel like I remember weapon ID 0xB but dont remember seeing it in game?
looking at 8023ae9c bl ->0x8023A10C:
inside of 8023a10c is 8023a128 beq- ->0x8023A134, which appears to branch over if weapon is dropped, and pass through if ammo is exausted
8023a128 beq- ->0x8023A134 <- nopping has no apparent effect
8023a130 bl	->0x801AB81C <- todo
8023a13c beq- ->0x8023A158 <- todo
8023a140 beq- ->0x8023A158 <- todo
^not a typo, both lines appear to do same thing(maybe?)

8023a154 bctrl(8023c800) <- when nopped, weapon is dropped but the model of the weapon shadow holds doesnt unload, model no longer stays with shadow
^maybe model unload function??? will need to look deeper laterS
			</Weapons>
		(/*Super State & Actions*)


		(*2P Super*)
	4/17/19
for potential 2p shadow: 80099f48 changes the stack in some way to put the player pointer at 0x20(sp), investigate
...
actually its just r4 that contains player pointer