		(*Transformation*)
	4/17/19
super loading model:
80086ec0: loads status bit(0xAC) 40000000


reads(0xAC):
800b5240
(deleted rest as lead to nothing)

8027f088 changes to 0x00000010
80079378 changes to 0xc0000000
8027f144 changes to 0x00080000

--this doesnt work, new approach---

----------------

80099f78 -> magic happens in here, nop the next check for always super
---not quite, isnt always called

800af8b8 -> the next step out, bctrl, appears to call multiple things
-without gecko code enabled the following are ctrl destinations:
	-801dbae4
	-80099898
	-80099a50
	-80099658
-with gecko code enabled
	-801dbae4
	-80099898
	-80099a50
	-80099658
	-80099f1c******** <- this one?
	
for the bctrl above, code goes like this:
	lwz r12, 0(r31);
	lwz r12, 0xC(r12);
	mtctr r12;
	bctrl;

(r12)801dbae4 originates from (r31)80992a00, which when dereferenced equates to string: "ClrVelocityCommand"
(r12)80099898 originates from (r31)809e5120, which when dereferenced equates to string: "Player::ResetCameraCommand"
(r12)80099a50 originates from (r31)809e5160, which when dereferenced equates to string: "Player::CancelActingCommand"
(r12)80099658 originates from (r31)809e51a0, which when dereferenced equates to string: "Player::ResetCommand"
(r12)80099f1c originates from (r31)809e51a0, which when dereferenced equates to string: "Player::ToSuperCommand"

80099f1c contains 80099f78 so.... partial success. now to find out why ToSuperCommand is called

	4/18/19
801a0480 a few steps out, might be main function caller?
sets position, angle, super etc on restart. confirmed working as nopping makes it not happen
looking for player pointer

	4/29/19
800b7e44 appears to be the function that calls ToSuper for shadow, called by 80177124 bl ->0x800B7E44
added no fade code, able to confirm that shadow loads in like normal, and super is done later, so it should be possible to reproduce at any time
800b7e68 bl	->0x800A8B74 <- appears to be the one that makes shadow super, nopping makes it not happen
so far r3/r30, and r4/r31 do not have anything player related
well wait..
nopping 800b7ed4 bctrl prevents super as well
yeah that makes more sense
so this should be possible, but due to everything being in the stack, and the stack always changing, not sure how to call this function at will
although it appears that the loading of the model has nothing to do with the to super function??
it looks like it may be a call to createeffect(), super specific call a few steps out, 800a2bc0 bl ->0x8027E2D0
interesting..
one more step out brings me to 80099f1c, which looks alot like the opposite of revertsuper() after glimpsing over the asm
bingo!? blr'ing 80099f1c prevents any of supers traits, despite the previous functions
80099fc8 bl	->0x800A7F14 <- seems to make super not happen when nopped?
actually upon further testing it seems the above halts(?), and 80099f8c bne- ->0x80099F90 prevents super when nopped
	4/30/19
oh ok so it was actually a rlwinm/bne combo that i nopped, which bnes over 80099fc8, so something inbetween causing halt?
anyways, the rlwinm appears to be testing some resu;t of the above 80099f8c bne- ->0x80099F90, inside of which has 800a2bc0 bl ->0x8027E2D0, which has a call to CreateEffect() at 8027e2ec bl ->0x8004EFC4
hmmmm
this is starting to resemble part of revert, also cotaining a string "super" and assigning it to something
looks like player super pointer is set but not read in this function, mey have to do read bp on player super pointers
...
OR may have to check further into 8027e310 bl ->0x8027EFC4, inside is a stage check for 701, changing to current stage activates fly mode
	5/7/19
8027efdc bl	->0x8006D714 <- nop = halt
8027efe4 bl	->0x80027D5C <- nop = super model not loaded
8027eff0 bl	->0x80078C88 <- nop = super model not loaded
8027eff8 bl	->0x8027AA78 <- nop = super model not loaded
8027f000 bl	->0x801D2DE8 <- nop = no apparent effect
8027f020 bdnz+ ->0x8027F014 
8027f050 bdnz+ ->0x8027F044
8027f070 beq- ->0x8027F07C <- b = no apparent effect
8027f078 bl	->0x800AA58C <- nop = no apparent effect
8027f088 bl	->0x80076CA8 <- nop = show ammo count
8027f09c bne- ->0x8027F0B0 <- nop = flight mode
8027f0ac bl	->0x80076CA8 <- skipped by above if not level 710
8027f0b8 bl	->0x80079334 <- nop = no apparent effect
8027f0cc bl	->0x800AADA4 <- nop = chaos spear targets self
8027f0d8 bl	->0x80051F88 <- nop = same as above, also no bullets, and screen blur from fully charged chaos spear doesnt dissapear automatically
8027f0e4 bl	->0x80051BD4 <- nop = no apparent effect
8027f0f0 bl	->0x802F0740 <- nop = halt
8027f0fc bl	->0x8027F174 <- nop = halt
8027f11c bctrl(8023b214) <- nop = no chaos spear, cannot pickup weapons
8027f128 bl	->0x8005BD24 <- nop = no apparent effect
8027f134 bl	->0x800ADE1C <- nop = no apparent effect
8027f144 bl	->0x80076CA8 <- nop = no apparent effect
8027f150 bl	->0x80051BD4 <- nop = no apparent effect

8027eff8->8027aa90->8027ae20 bl	->0x800128D8 <- appears to be the important function, but wow this is going to take some time to figure out
	5/9/19
SO...
bp on 800af548, do a punch or spindash (punch perferred), bp trips, grab r4 which points to address of action, change to address of "Player::ToSuperCommand"(80520EF0)...
Super Transformation!
(also doing the same thing a second time de transforms)
so how do I do this more conviniently...?
	5/10/19
looks like the key may be deepstatecall or deeperstatecall or deepstatecallee
in these cases, r4 is the command, changing to ToSuperCommand works here as well
so far no sign of a player pointer

	5/12/19
Super Function call order:
800b7e44
8009a0cc
800a2b7c
8009a070

		(/*Transformation*)

		(*De-Transformation*)
	4/20/19
unrelated maybe:
800af6b8 bctrl called when player hit, followed by a beq. nopping beq causes death every hit, even for super


8027e184 stw  r0, 0x74 (r3) -> nopping this prevents the super "effect" pointer from being set to null, and keeps the super model, even though shadow is no longer "super"

after doing a write bp on the pointer to super effect, 8004eed4 appears to set it to 0 as follows:
8004ef64 stw  r0, 0xC (r3)

stepping out to the previous function 8027e1e0, the top of which sets 0x18(r30) to 8054defc, which appears to be a proper pointer to Player::Shadow::Super
never seen this "object" before, might be related

turns out the pointer to the "super effect" only makes regular shadow invisible, thus not quite what im after

going back to 8027e184 to see why 0x74(r3) being set to 2 causes super model to dissapear, and shadow to reappear

	4/21/19
so actually after setting the pointer to "Super"(playerpointer->0x23c->0x44) to null it looks like it detaches super shadows model from shadow
so while this probably is related to creating/destroying the model, but it will likely be in a differnet function


		(/*De-Transformation*)
		
		(*Super State & Actions*)
			<Weapons>
	4/21/19
determined that the following bctrl in 8027e0d8 leads to the function that removes the chaos spear "weapon" upon reverting to normal:
8027e178 bctrl -> 8023aff0
can confirm, as nopping this bctrl allows shadow to keep chaos spear even after reverting to normal
does not appear however to be the function everything uses for weapons, as shadow still gains chaos spear even after adding a blr at the top
hmm... shadow appears to be able to "drop" it but never actually lets go
additionally, swapping with another weapon causes a halt
but good news is that super shadow is able to pickup other weapons, but was only able to acheive this by nopping the code that keeps super shadows model, so the game thinks shadow is normal otherwise
will look into what other checks I am not accounting for that may affect chaos spear, will probably revisit 8023aff0 as there are some "status" checks in there

	4/23/19
after putting a blr at the top of 8023aff0, shadow maintains chaos spear after reverting.
shadow attempts to drop weapon but cannot. able to switch for other weapons, vaccum gun doesnt appear to work(although on a second test and beyond it does?), but shadow rifle does
shadow is now not able to drop shadow rifle, and does not drop even after running out of ammo, can keep shooting
does not drop shadow rifle while dying, upon respawning shadow regains chaos spear
8023b03c bl	->0x8023AD08 appears to be the important call, nopping does the same as above
putting a breakpoint on 8023aff0, trips when a weapons is dropped (but not picked up), and when all ammo is consumed
put a breakpoint on 8023ad08 -> same as above
inspecting 8023ad08:
8023ad1c lwz r3, 0x0034 (r3)
8023ad20 cmplwi	r3, 0
8023ad24 beq- ->0x8023AEA0 <- if its equal and makes the branch, it jumps over the code that drops weapon
...

8023ad58 beq- ->0x8023AD84 <- appears to always branch when weapon dropped, appears to be some check to load alternate drop speed parameters (slightly father away)
8023ad7c bl	->0x800091D0 <- branched over by above^
8023ad80 b ->0x8023ADA8 <- branched over by above^
8023ada4 bl	->0x800091D0 <- when nopped weapon immediate hits ground when dropped
8023adb4 bl	->0x80079628 <- when nopped the weapon is dropped, dissapears, and does not land on ground (although not like when consuming all ammo)
8023adc0 bl	->0x800091D0 <- when nopped dropped weapon always falls the same direction
8023adcc bl	->0x80079698 <- no apparent change when nopped
8023add8 bl	->0x800091EC <- no apparent change when nopped
8023ade4 bl	->0x800091EC <- when nopped the weapon is dropped, dissapears and does not land on ground (although not like when consuming all ammo)
8023adf4 bl	->0x8040CD74 <- no apparent change when nopped
8023ae00 bl	->0x800091EC <- no apparent change when nopped
8023ae0c bl	->0x80221D94 <- no apparent change when nopped
8023ae18 bl	->0x80093230 <- no apparent change when nopped
8023ae24 bl	->0x8040CFF8 <- no apparent change when nopped
8023ae34 bl	->0x8023ABF0 <- weapon ammo reset when dropped, even when ammo is exausted
8023ae50 bl	->0x80221B08 <- when nopped the weapon is dropped, dissapears and does not land on ground (although not like when consuming all ammo)
8023ae58 bl	->0x8023ABF0 <- no apparent change when nopped
8023ae60 bne- ->0x8023AE8C <- no apparent change when nopped, no apparent change when changed to b
8023ae64 bl	->0x8040EE90 <- no apparent change when nopped
8023ae74 bne- ->0x8023AE8C <- no apparent change when nopped
8023ae78 bl	->0x80053164 <- no breakpoint hits during weapon drop
8023ae88 bl	->0x801D560C <- no change when nopped
8023ae9c bl	->0x8023A10C <- when nopped the weapon is dropped, but shadow also keeps a copy of weapon in his hand

tsking a look at 8023ae34 bl ->0x8023ABF0:
the line above it is 8023ae30 lwz r31, 0x0014 (r4)
in this case r31 appears to be some sort of weapon ID. changing ad-hoc after a breakpoint makes a different weapon drop while maintaining ammo amount
...
after experimenting with this for a bit. I feel like I remember weapon ID 0xB but dont remember seeing it in game?
this also appears to count with chaos spear, replacing the weapon id drops a weapon with 999 ammo (not infinite)
looking at 8023ae9c bl ->0x8023A10C:
inside of 8023a10c is 8023a128 beq- ->0x8023A134, which appears to branch over if weapon is dropped, and pass through if ammo is exausted
8023a128 beq- ->0x8023A134 <- nopping has no apparent effect
8023a130 bl	->0x801AB81C <- when nopped, weapon drops and shadow keeps a copy in his hand, however shadow punches instead of shooting. cannot drop the "weapon" and collecting another weapon of the same type makes it dissapear as if collecting it, however it can be switched for a differnt type of weapon
8023a13c beq- ->0x8023A158 <- seems to always pass through, so nopping has no effect, changing to b does the same as below
8023a140 beq- ->0x8023A158 <- seems to always pass through, so nopping has no effect, changing to b does the same as below
^not a typo, both lines appear to do same thing(maybe?)

8023a154 bctrl(8023c800) <- when nopped, weapon is dropped but the model of the weapon shadow holds doesnt unload, model no longer stays with shadow
^maybe model unload function??? will need to look deeper later

8023a16c beq- ->0x8023A1B0 <- appears to always pass through, both nopping and changing to b have no effect
8023a180 bctrl(800b5008) <- no apparent change when nopped
8023a19c bctrl(800b4f3c) <- no apparent change when nopped
8023a1ac bl	->0x800AA6C0 <- no apparent change when nopped
8023a1bc bl	->0x80076CC8 <- when nopped, upon dropping weapon, unable to punch or melee attack. only able to pickup weapons by "switching" to them with x button, cannot drop anything with y button unless weapon is in hand
8023a1c0 bl	->0x80079808 <- does nothing when nopped alone, combine with above^ will have same affect as above but also continue to display ammo gui. doesnt seem to be useful
8023a1cc bl	->0x80178B5C <- no apparent change when nopped
8023a1d4 beq- ->0x8023A1EC <- appears to always pass through, no apparent change when replacing with b
8023a1dc bl	->0x8016EEE8 <- no apparent change when nopped
8023a1e8 bl	->0x8016EEE0 <- no apparent change when nopped

points of interest:
			in 8023AD08:
	8023ae34 bl ->0x8023ABF0: r4 contains pointer to weapon type object, and r30 contains pointer to ShadowWeapon, also found in my player pointer
	8023ae50 bl	->0x80221B08
	8023ae9c bl	->0x8023A10C
	
			in 8023A10C:
	8023a130 bl	->0x801AB81C
	8023a1bc bl	->0x80076CC8
	8023a1c0 bl	->0x80079808
	
	
	4/24/19
looking at 801ab81c:
801ab834 bl	->0x8005BEDC <- nopping causes halt when weapon dropped
801ab840 bl	->0x801AB864 <- when nopped, drops weapon but copy remains in hand. shadow able to punch and not shoot
801ab84c bl	->0x8005BD24 <- when nopped, model left floating when weapon is dropped
address needed likely 801ab840. with a bp set, also tripped after blinking following being hit for some reason? hmm maybe not? was doing it for a while but does not anymore
...
determined that the other wierd trip of bp is when enemy is too far away and despawns, presumably despawning weapon
this function swaps (r4) and (r4 + 4) with (r3) and (r3 + 4)
r3 = ??, maybe weapon to be dropped
r4 = weapon shadow is holding
nopping 801ab870 stw r5, 0 (r4) alone crashes, but if 801ab880 stw r5, 0x0004 (r3) is also nopped, it behaves like previous nops, with persistent weapon model
the usual function is similar to this:
	
	r3: 0
	r3+4: 0
	r4: pointer1
	r4+4: pointer2
		|
		V
	r3: pointer1
	r3+4: pointer2
	r4: 0
	r4+4: 0
	
with the nops it looks more like this:
	r3: pointer1
	r3+4: 0
	r4: pointer1
	r4+4: 0

first guess is that the model existing both on the ground and in the hands is due to r3 and r4 being equal
manually setting r4 to 0 afer the function executes results in the same two models, but one does not follow shadow
manually setting r3 to 0 has no immediate effect, will need to test all permuations

	r3: 0
	r3+4: 0
	r4: 0
	r4+4: 0
		--->>>:floating weapon
	
	r3: 0
	r3+4: 0
	r4: 0
	r4+4: pointer2
		--->>>:floating weapon, dissapears when real weapon is picked up
	
	r3: 0
	r3+4: pointer2
	r4: pointer1
	r4+4: 0
		--->>>: halt
	
	r3: 0
	r3+4: 0
	r4: pointer1
	r4+4: 0
		--->>>: drops weapon, shadow keeps copy but only can punch
	
	r3: 0
	r3+4: 0
	r4: pointer1
	r4+4: pointer2
		--->>>: drops weapon, shadow keeps copy but only can punch
	
	r3: 0
	r3+4: pointer2
	r4: 0
	r4+4: pointer2
		--->>>: drops weapon like normal, crashes when picked up
	
	r3: pointer1
	r3+4: pointer2
	r4: 0
	r4+4: pointer2
		--->>>: regular weapon drop
		
	4/25/19
after looking at multiple combinations, it appears that r4 containing pointer1 coincides with shadow holding a weapon copy after dropping
	4/26/19
setting a write BP on the address pointed to by r4
located functions with static pointers to objects, such as Weapon::WeaponBase, maybe the function factory destructor?
using ring shooter as an example when dropped, will look into 80064aac(Weapon::RingShot):
appears to be destructor, appears to not call next two if blr'd
next is 8005ebb0(Weapon::WeaponGunBase):
looks like destructor, wont call next one if blr'd
then comes 8005d03c(Weapon::WeaponBase):
looks like its a destructor too
further looking shows that these functions are called by eachother in hierarchy
	4/30/19
side note: found the code that gives shadow the chaos spear "weapon" while looking at related transformation code above. changing ammo from 999 to 1 but still infinite
	5/6/19
appears as though enemies generate some secondary weapon object when shooting? not sure, see a few functions that are called when shadow picks up a weapon, that are also called when an enemy shoots a bullet

			</Weapons>
		(/*Super State & Actions*)


		(*2P Super*)
	4/17/19
for potential 2p shadow: 80099f48 changes the stack in some way to put the player pointer at 0x20(sp), investigate
...
actually its just r4 that contains player 

	5/9/19
attempting to have both players be super with following steps:
set a bp just after the bctrl, like on 800b7ed8
then set pc to 800b7e54(i tried 800b7e4c so that mflr would happen but it crashed so have to do e54)
i dont think you have to set r0 as its set later but i always set it to p2 x pointer here just in case
go ahead and grab the address from r1, add 0x18 to it then set it to p2 x pointer at this time
step over the code until you get to the 800b7e9c lwz r0, 0x0018 (sp)  by this time sp + 0x18 will have been set to 0 by the bl above it
go ahead and set sp + 0x18 back to p2 x pointer
step through the code and make sure it doesnt branch at 800b7ea4 beq- ->0x800B7ED8
if it doesnt branch youre good to go

this works! but p2 super model does not load correcty. however a death/restart seems to fix this
	5/12/19
further investigation shows that I should be able to change r3 to p2 pointer right before 80099f88 so that it grabs p2s pointer, then set pc back to 80099f90 to get p1s pointer from stack
this should set both players to super, works on glyphic canyon, will check devil doom
success!
although just like last attempt, p2 doesnt load super model correctly (even after restart), will look into changing pointers earlier in the call stack
will probably go ahead and put bps on all super functions to determine call order as well
documenting call order in transformation section